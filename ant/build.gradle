plugins {
  id 'java'
  id 'maven'
  id 'signing'
  id 'maven-publish'
  id 'com.palantir.git-version'
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceCompatibility = 1.11
version = '2.0.0-SNAPSHOT'

dependencies {
  implementation 'com.needhamsoftware.unojar:core:' + project.version
  implementation 'org.apache.ant:ant:1.10.7'
}

task copyCore(type: Copy) {
  dependsOn ':core:jar'
  from '' + projectDir + "/../core/build/libs/core-" + project.version + ".jar"
  into '' + projectDir + "/build"
  rename("core-" + project.version + ".jar", "core.jar")
}

jar {
  dependsOn copyCore
  def gitDetails = versionDetails();
  manifest {
    attributes(
        'Implementation-Version': version,
        'Build-Tool': "Gradle ${gradle.gradleVersion}",
        'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
        'Created-By': "Gradle ${gradle.gradleVersion}",
        'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
        'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}

/*

 Maven Publishing stuff to publish to central. This also allows you to publish
 to a local repository on your system byt setting the version to -LOCAL instead
 of -SNAPSHOT. Specifically:

  To test pom and artifact generation locally...

  1. Ensure GPG keyring in .gnupg dir
  2. Check that the value (above) for ext.
  3. Change version to remove -SNAPSHOT and add -LOCAL
  4. Run gradle uploadArchives
  5. observe archives uploaded to ext.uploadRepo (adjust location as needed)


  To release to central

  1. Ensure GPG keyring in .gnupg dir
  2. Ensure passwords for sonatype in gradle.properties
  3. Test the production of artifacts locally with -LOCAL (see above)
  4. No really, test it, and read everything...
  5. Seriously, don't skip #3!
  6. Change version to remove -SNAPSHOT
  7. Run gradle uploadRelease
  8. Hope to hell you didn't miss anything in step 3....
  9. you skipped #3? OMG you suck... *sigh*

 */

ext.isSnapshot = version.endsWith('-SNAPSHOT')
ext.isLocal = version.endsWith('-LOCAL')
ext.isRelease = !(isLocal || isSnapshot)

ext.releaseRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
ext.snapshotRepo = 'https://oss.sonatype.org/content/repositories/snapshots'
ext.testingRepo = 'file:///tmp/myRepo/'
ext.uploadRepo = isRelease ? releaseRepo : (isSnapshot ? snapshotRepo : testingRepo)


task uploadSnapshot(dependsOn: uploadArchives, group: 'upload') {}
task uploadRelease(dependsOn: uploadArchives, group: 'upload') {}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  archiveName = 'ant-'+project.version+'-sources.jar'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
  archiveName = 'ant-'+project.version+'-javadoc.jar'
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

// A little idiot proofing...
task checkUploadDest {
  doLast {
    if (gradle.taskGraph.hasTask(':ant:uploadRelease')) {
      if (isSnapshot) {
        ant.fail('Release should not have suffix of -SNAPSHOT')
      }
      if (isLocal) {
        ant.fail('Release should not have suffix of -LOCAL')
      }
    } else if (gradle.taskGraph.hasTask(':ant:uploadSnapshot')) {
      if (!isSnapshot) {
        ant.fail('Snapshot should have suffix of SNAPSHOT')
      }
    } else {
      if (!isLocal) {
        ant.fail('This is not a local version, ' +
            'please use either uploadRelease or uploadSnapshot, or change the version suffix to -LOCAL')
      }
    }
  }
}

// Uncomment this to do sonatype uploads (fails on all other machines looking for gpg key otherwise)
//
signing {
  required { !isLocalVersion && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}


ext.isLocalVersion = !version.endsWith("LOCAL")

uploadArchives {
  it.dependsOn checkUploadDest
  repositories {
    mavenDeployer {
      beforeDeployment { deployment -> signing.signPom(deployment) }
      repository(url: project.uploadRepo) {
        authentication(userName: propOrDefault('sonatypeUsername','foo'), password: propOrDefault('sonatypePassword','foo'))
      }
      pom.project {
        //noinspection GroovyAssignabilityCheck
        parent {
          groupId 'org.sonatype.oss'
          artifactId 'oss-parent'
          version '7'
        }
        groupId 'com.needhamsoftware.unojar'
        artifactId 'ant'
        name 'Uno-Jar Ant Task'
        description 'Ant Task for packaging FatJars with a JarClassLoader'
        url 'https://github.com/nsoft/uno-jar'
        licenses {
          license {
            name 'MIT/One-JAR'
            url 'https://github.com/nsoft/uno-jar/blob/master/LICENSE.txt'
            distribution 'repo'
          }
        }
        scm {
          connection 'scm:git:git@github.com:nsoft/uno-jar.git'
          developerConnection 'scm:git:git@github.com:nsoft/uno-jar.git'
          url 'git@github.com:nsoft/uno-jar.git'
        }
        developers {
          developer {
            id 'nsoft'
            name 'Patrick Heck'
            email 'gus@needhamsoftware.com'
          }
        }
      }
      pom.withXml { root ->
        def children = root.asNode().children()
        def versionIndex = children.indexOf(children.find { it.name().localPart == 'version' })
        // Stuff that sonatype wants... there may be a way to make these appear automatically but...
        // http://issues.gradle.org/browse/GRADLE-1285
        children.add(versionIndex + 1, new Node(null, 'packaging', 'jar'))
      }
    }
  }
}

jar.manifest.attributes getManifestAttributes()
sourcesJar.manifest.attributes getManifestAttributes()
javadocJar.manifest.attributes getManifestAttributes()

@SuppressWarnings("GroovyAssignabilityCheck")
def getManifestAttributes() {
  def gitDetails = versionDetails();
  return [
      'Implementation-Version': version,
      'Build-Tool': "Gradle ${gradle.gradleVersion}",
      'Build-Revision': gitDetails.gitHashFull + (gitDetails.clean ? '' : ' (with uncommitted files)'),
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"]
}


def propOrDefault(String prop, String defaultVal) {
  return project.hasProperty(prop) ? project.getProperty(prop) : defaultVal
}


publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId 'com.needhamsoftware.unojar'
      artifactId 'ant'
      version project.version
      from components.java
    }
  }
}

task copyCoreJar(type: Copy) {
  dependsOn copyCore
  from '' + projectDir + "/build/core.jar"
  into '' + projectDir + "/build/classes/java/main/com/needhamsoftware/unojar/ant"
}

jar.dependsOn(copyCoreJar)

configurations {
  antjar
}

artifacts {
  antjar jar
}

compileJava.dependsOn ':core:publishToMavenLocal'