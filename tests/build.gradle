import org.apache.tools.ant.taskdefs.Manifest

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath 'org.apache.ant:ant:1.10.7'
    classpath files('../gradle-plugin/build/libs/gradle-plugin-1.0-SNAPSHOT.jar')
  }
}

plugins {
  id 'java'
  id 'com.needhamsoftware.unojar' version '2.0.0-SNAPSHOT'
}

version = '2.0.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  ujconf
  log4jTest
  mrJarTest
  hibJarTest
}

dependencies {
  implementation 'com.needhamsoftware.unojar:core:' + project.version
  ujconf project(path: ':ant', configuration: 'antjar')
  testCompile 'org.apache.logging.log4j:log4j-core:2.13.0'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  log4jTest 'org.apache.logging.log4j:log4j-core:2.13.0'
  mrJarTest 'org.apache.logging.log4j:log4j-core:2.13.0'
  testCompile 'org.hibernate:hibernate-core:5.4.28-SNAPSHOT'
  testCompile 'org.hsqldb:hsqldb:2.3.4'
}

task libtestJar(type: Jar) {
  dependsOn compileTestJava
  from('build/classes/java/test') {
    include '**/LibTest.class'
  }
  archiveName "libtest.jar"
}

task libtestJarLog4j(type: Jar) {
  dependsOn compileTestJava
  from('build/classes/java/test') {
    include '**/LibTestLog4jPlugin.class'
  }
  archiveName "libtestLog4j.jar"
}

task libtestMRJar(type: Jar) {
  dependsOn compileTestJava
  from('build/classes/java/test') {
    include '**/LibTestLog4jPlugin.class'
  }
  archiveName "libtestMRJar.jar"
}

task libtestHibernateJar(type: Jar) {
  dependsOn compileTestJava
  from('build/classes/java/test') {
    include '**/LibTestLog4jPlugin.class'
  }
  archiveName "libtestMRJar.jar"
}

unojar {
  unoJar "build/testJar2.jar"
  manifestAttrs ("Test-Attribute" : "TestValue")
  appMainClass "com.needhamsoftware.unojar.TestMain"
  appFiles {
    fileset(dir: 'build/classes/java/test') {
      include(name: '**/TestMain.class')
    }
  }
  depLibs {
    fileset(dir: 'build/libs') {
      include(name: 'libtest.jar')
    }
  }
}

task testJar1(dependsOn: [testClasses, libtestJar, ':ant:jar']) {
  def cp = project.buildscript.configurations.getByName('classpath')
  def find = cp.find {
    if (it.canonicalPath.matches('.*needhamsoftware/unojar/ant/.*/ant-.*\\.jar')) return it
  }
  def ujjar = new URL('file://' + find)
  def p = ujjar.toURI().toString().substring(5)
  println p
  println '' + ujjar + ' ' + new File(p).exists()

  doLast {
    ant.taskdef(name: "uj", classpath: ujjar, classname: "com.needhamsoftware.unojar.ant.UnoJarTask")

    def mf = Manifest.getDefaultManifest()
    mf.addConfiguredAttribute(new Manifest.Attribute("Uno-Jar-Main-Class", "com.needhamsoftware.unojar.TestMain"))
    mkdir("$projectDir/build/com.needhamsoftware.unojar/" + name)
    def mff = new File("$projectDir/build/com.needhamsoftware.unojar/" + name + "/manifest.mf")
    mff.write "" + mf;

    ant.uj(destFile: 'build/testjar1.jar', manifest: mff) {

      main {
        fileset(dir: 'build/classes/java/test') {
          include(name: '**/TestMain.class')
        }
      }
      lib {
        fileset(dir: 'build/libs') {
          include(name: 'libtest.jar')
        }
      }
      // note that we can't use a mainfest {} closure here because gradle creates a Gradle Manifest not an Ant
      // manifest and then proceeds to throw it away. Many hours died to bring us this information...
    }
  }
}

task testJarLog4j(dependsOn: [testClasses, libtestJarLog4j, ':ant:jar']) {
  def cp = project.buildscript.configurations.getByName('classpath')
  def find = cp.find {
    if (it.canonicalPath.matches('.*needhamsoftware/unojar/ant/.*/ant-.*\\.jar')) return it
  }
  def ujjar = new URL('file://' + find)
  def p = ujjar.toURI().toString().substring(5)
  println p
  println '' + ujjar + ' ' + new File(p).exists()

  doLast {
    ant.taskdef(name: "uj", classpath: ujjar, classname: "com.needhamsoftware.unojar.ant.UnoJarTask")

    def mf = Manifest.getDefaultManifest()
    mf.addConfiguredAttribute(new Manifest.Attribute("Uno-Jar-Main-Class", "com.needhamsoftware.unojar.TestMainLog4jPlugin"))
    mkdir("$projectDir/build/com.needhamsoftware.unojar/" + name)
    def mff = new File("$projectDir/build/com.needhamsoftware.unojar/" + name + "/manifest.mf")
    mff.write "" + mf;

    ant.uj(destFile: 'build/testLog4j.jar', manifest: mff) {

      main {
        fileset(dir: 'build/classes/java/test') {
          include(name: '**/TestMainLog4jPlugin.class')
          include(name: '**/TestConsoleAppender**')
        }
        fileset(dir: 'build/resources/test') {
          include(name: 'log4j2.xml')
        }
      }
      lib {
        fileset(dir: 'build/libs') {
          include(name: 'libtestLog4j.jar')
        }
        configurations.log4jTest.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)

      }
      // note that we can't use a mainfest {} closure here because gradle creates a Gradle Manifest not an Ant
      // manifest and then proceeds to throw it away. Many hours died to bring us this information...
    }
  }
}

task testMRJar(dependsOn: [testClasses, libtestMRJar, ':ant:jar']) {
  def cp = project.buildscript.configurations.getByName('classpath')
  def find = cp.find {
    if (it.canonicalPath.matches('.*needhamsoftware/unojar/ant/.*/ant-.*\\.jar')) return it
  }
  def ujjar = new URL('file://' + find)
  def p = ujjar.toURI().toString().substring(5)
  println p
  println '' + ujjar + ' ' + new File(p).exists()

  doLast {
    ant.taskdef(name: "uj", classpath: ujjar, classname: "com.needhamsoftware.unojar.ant.UnoJarTask")

    def mf = Manifest.getDefaultManifest()
    mf.addConfiguredAttribute(new Manifest.Attribute("Uno-Jar-Main-Class", "com.needhamsoftware.unojar.TestMainLog4jMRJar"))
    mkdir("$projectDir/build/com.needhamsoftware.unojar/" + name)
    def mff = new File("$projectDir/build/com.needhamsoftware.unojar/" + name + "/manifest.mf")
    mff.write "" + mf;

    ant.uj(destFile: 'build/testMRJar.jar', manifest: mff) {

      main {
        fileset(dir: 'build/classes/java/test') {
          include(name: '**/TestMainLog4jMRJar.class')
          include(name: '**/TestConsoleAppender**')
        }
        fileset(dir: 'build/resources/test') {
          include(name: 'log4j2.xml')
        }
      }
      lib {
        fileset(dir: 'build/libs') {
          include(name: 'libtestMRJar.jar')
        }
        configurations.log4jTest.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)

      }
      // note that we can't use a mainfest {} closure here because gradle creates a Gradle Manifest not an Ant
      // manifest and then proceeds to throw it away. Many hours died to bring us this information...
    }
  }
}

task testHibernateJar(dependsOn: [testClasses, libtestHibernateJar, ':ant:jar']) {
  def cp = project.buildscript.configurations.getByName('classpath')
  def find = cp.find {
    if (it.canonicalPath.matches('.*needhamsoftware/unojar/ant/.*/ant-.*\\.jar')) return it
  }
  def ujjar = new URL('file://' + find)
  def p = ujjar.toURI().toString().substring(5)
  println p
  println '' + ujjar + ' ' + new File(p).exists()

  doLast {
    ant.taskdef(name: "uj", classpath: ujjar, classname: "com.needhamsoftware.unojar.ant.UnoJarTask")

    def mf = Manifest.getDefaultManifest()
    mf.addConfiguredAttribute(new Manifest.Attribute("Uno-Jar-Main-Class", "com.needhamsoftware.unojar.TestMainHibernateJar"))
    mkdir("$projectDir/build/com.needhamsoftware.unojar/" + name)
    def mff = new File("$projectDir/build/com.needhamsoftware.unojar/" + name + "/manifest.mf")
    mff.write "" + mf;

    ant.uj(destFile: 'build/testMRJar.jar', manifest: mff) {

      main {
        fileset(dir: 'build/classes/java/test') {
          include(name: '**/TestMainLog4jMRJar.class')
          include(name: '**/TestConsoleAppender**')
        }
        fileset(dir: 'build/resources/test') {
          include(name: 'log4j2.xml')
        }
      }
      lib {
        fileset(dir: 'build/libs') {
          include(name: 'libtestMRJar.jar')
        }
        configurations.log4jTest.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)

      }
      // note that we can't use a mainfest {} closure here because gradle creates a Gradle Manifest not an Ant
      // manifest and then proceeds to throw it away. Many hours died to bring us this information...
    }
  }
}
packUnoJar.dependsOn libtestJar
test.dependsOn testJar1
test.dependsOn testJarLog4j
test.dependsOn testMRJar
test.dependsOn packUnoJar